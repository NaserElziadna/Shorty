#pragma checksum "C:\Users\star\Desktop\File\Gategories\Shorty\UrlShortener\UrlShortener\Views\Shared\_LinksStatistics.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dd35ac537e37db29ef317798716f645584b991bc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__LinksStatistics), @"mvc.1.0.view", @"/Views/Shared/_LinksStatistics.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\star\Desktop\File\Gategories\Shorty\UrlShortener\UrlShortener\Views\_ViewImports.cshtml"
using UrlShortener;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\star\Desktop\File\Gategories\Shorty\UrlShortener\UrlShortener\Views\_ViewImports.cshtml"
using UrlShortener.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\star\Desktop\File\Gategories\Shorty\UrlShortener\UrlShortener\Views\_ViewImports.cshtml"
using UrlShortener.Application.User.DTOs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\star\Desktop\File\Gategories\Shorty\UrlShortener\UrlShortener\Views\Shared\_LinksStatistics.cshtml"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dd35ac537e37db29ef317798716f645584b991bc", @"/Views/Shared/_LinksStatistics.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bbae3ecdbb111aa77f0404048820aee20e9eca34", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__LinksStatistics : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<UserDTO>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 5 "C:\Users\star\Desktop\File\Gategories\Shorty\UrlShortener\UrlShortener\Views\Shared\_LinksStatistics.cshtml"
  

    var urlPrefix = Configuration["BASE_URL"] + Configuration["RedirectToUrl"];

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<table id=""table""
       data-toggle=""table""
       data-height=""460""
       data-ajax=""ajaxRequest""
       data-search=""true""
       data-pagination=""true""
       data-show-columns=""true""
       data-show-refresh=""true""
       data-show-columns-toggle-all=""true""
       data-show-pagination-switch=""true""
       data-show-toggle=""true""
       data-show-multi-sort=""true""
       data-search-highlight=""true""
       data-detail-formatter=""detailFormatter""
       data-show-fullscreen=""true"">
    <thead>
        <tr>
            <th data-field=""originalUrl"" data-sortable=""true"" data-search-highlight-formatter=""customSearchFormatter"">OriginalUrl</th>
            <th data-field=""shortUrl._hash"" data-sortable=""true"" data-formatter=""urlFormatter"" data-search-highlight-formatter=""customSearchFormatter"">ShortUrl</th>
            <th data-field=""expirationDate"" data-sortable=""true"" data-search-highlight-formatter=""customSearchFormatter"">ExpirationDate</th>
            <th data-field=""visitsCount"" data");
            WriteLiteral(@"-sortable=""true"" data-search-highlight-formatter=""customSearchFormatter"">visitsCount</th>
            <th data-formatter=""detailButtonFormatter"">Actions</th>
        </tr>
    </thead>
</table>
<div id=""link-details-container"" class=""card mt-5"">
    <h5 class=""card-header"">Link Details</h5>
    <div class=""card-body"">
        <h6>Expiry Date: <span id=""expiry-date""></span></h6>
        <h4 id=""link-details-title"">
            <a");
            BeginWriteAttribute("href", " href=\"", 1657, "\"", 1664, 0);
            EndWriteAttribute();
            WriteLiteral(@" target=""_blank""></a>
            <i class=""fa-solid fa-link d-none""></i>
        </h4>
        <h6 id=""link-details-subtitle"" class=""card-subtitle mb-2 text-muted""></h6>
        <canvas id=""myChart"" style=""width:100%;max-width:600px""></canvas>
        <hr>
        <div class=""row"">
            <div class=""col-md-6"">
                <p class=""card-text""><strong>Total Clicks:</strong> <span id=""total-clicks""></span></p>
            </div>
        </div>
    </div>
</div>

<script>
");
            WriteLiteral(@"
    window.customSearchFormatter = function (value, searchText) {
        return value.toString().replace(new RegExp('(' + searchText + ')', 'gim'), '<span style=""background-color: pink;border: 1px solid red;border-radius:90px;padding:4px"">$1</span>')
    }

    function ajaxRequest(params) {
        let url = `${window.location.origin}/getUserStatistic`;
        //var url = 'https://examples.wenzhixin.net.cn/examples/bootstrap_table/data'
        $.get(url).then(function (res) {
            console.log(res.links)
            params.success(res.links)
        })
    }

    function urlFormatter(value, row) {
        return `<i class=""fa-solid fa-link""></i>  <a href=""");
#nullable restore
#line 110 "C:\Users\star\Desktop\File\Gategories\Shorty\UrlShortener\UrlShortener\Views\Shared\_LinksStatistics.cshtml"
                                                       Write(urlPrefix);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"${value}"" target=""_blank"">${value}</a>`
        //return '<i class=""fa ' + icon + '""></i> ' + value
    }
    function detailButtonFormatter(value, row, index) {
        return '<button class=""btn btn-primary"" onclick=""showDetails(' + index + ')"">View Details</button>';
    }

    function showDetails(index) {
        var row = $('#table').bootstrapTable('getData')[index];
        console.log(row)
        var id = `myChart`
        console.log(id)
        generateLocationChart(id, row)
        $(""#link-details-title a"").text(`${row.shortUrl._hash}`)
        $(""#link-details-title a"").attr(""href"", `");
#nullable restore
#line 124 "C:\Users\star\Desktop\File\Gategories\Shorty\UrlShortener\UrlShortener\Views\Shared\_LinksStatistics.cshtml"
                                             Write(urlPrefix);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"${row.shortUrl._hash}`)
        $(""#link-details-title i"").removeClass(""d-none"")
        $(""#link-details-subtitle"").text(`${row.originalUrl}`)
        $(""#expiry-date"").text(`${row.expirationDate}`)
        $(""#total-clicks"").text(`${row.visitsCount}`)

        //check expiry Date
        // Get the expiry date from your data
        const expiryDate = moment(row.expirationDate);

        // Get the current date
        const currentDate = moment();

        console.log(row.expirationDate)
        console.log(currentDate)
        console.log(expiryDate)
        console.log(expiryDate.isBefore(currentDate))
        // Compare the two dates to see if the expiry date is before today
        if (expiryDate.isBefore(currentDate)) {
            $(""#expiry-date"").addClass('expired');
            $(""#expiry-date"").text(`${$(""#expiry-date"").text()}  - (your link has been expired)`)
        } else {
            $(""#expiry-date"").removeClass('expired');
        }
    }
    function generateLoca");
            WriteLiteral(@"tionChart(id, row) {
        var location = row.locations;
        var xValues = [];
        var yValues = [];
        var barColors = [];

        for (let i = 0; i < location.length; i++) {
            let data = JSON.parse(location[i].dataDecoded);
            if (data.status === ""success"") {
                let country = data.country;
                let index = xValues.indexOf(country);
                if (index !== -1) {
                    // If the country already exists in the xValues array,
                    // increment the corresponding y value at the same index
                    console.log(`country already exists - ${country}`)
                    console.log(yValues[index])
                    yValues[index]++;
                } else {
                    // If the country doesn't exist in the xValues array,
                    // add it with a y value of 1
                    xValues.push(country);
                    console.log(`add country - ${country}`)
          ");
            WriteLiteral(@"          yValues.push(1);
                    barColors.push(getRandomColor());
                }
            } else {
                xValues.push(""unknown"");
                if (!yValues[i]) {
                    yValues.push(1)
                } else {
                    yValues[i]++
                }
                barColors.push(getRandomColor()); //regerate each time
            }
        }

        let index = xValues.indexOf(""unknown"");
        if (yValues[index] < row.visitsCount) {
            console.log(""more unkown location -not regestired"")
            yValues[index] = yValues[index] + (row.visitsCount - yValues[index])
        }

        if (location.length === 0) {
            xValues.push(""unknown"")
            yValues.push(row.visitsCount)
            barColors.push(getRandomColor())
        }
        xValues.push()
        yValues.push(0)
        barColors.push(""#000000"")

        console.log(xValues)
        console.log(yValues)
        console.log(barColo");
            WriteLiteral(@"rs)

        new Chart(id, {
            type: ""bar"",
            data: {
                labels: xValues,
                datasets: [{
                    backgroundColor: barColors,
                    data: yValues
                }]
            },
            options: {
                legend: { display: false },
                title: {
                    display: true,
                    text: ""Locations""
                }
            }
        });
    }

    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }

    //function detailFormatter(index, row) {
    //    var html = []
    //    $.each(row, function (key, value) {
    //        if (key === ""locations"") {
    //            //var id = `myChar");
            WriteLiteral(@"t${getRandomInt(1000)}`
    //            var id = `myChart`
    //            //html.push(`<canvas id=""${id}"" style=""width:100%;max-width:600px""></canvas>`)
    //            console.log(value)
    //            console.log(id)
    //            generateLocationChart(id, value)
    //            html.push($(""#link-details-container"").html())
    //        }
    //    })
    //    return html.join('')
    //}
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IConfiguration Configuration { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<UserDTO> Html { get; private set; }
    }
}
#pragma warning restore 1591
